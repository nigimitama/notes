Traceback (most recent call last):
  File "/usr/local/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.10/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# (2) 条件付き売買戦略
strategy = pd.DataFrame(index=data.index)
strategy['Daily Change (%)'] = (data['Close'] - data['Open']) / data['Open'] * 100
strategy['Position'] = 0.0

# 売買のロジック
position = 0.0
cash = 1.0  # 初期資金 1単位
positions = []
for i in range(len(data)):
    if position == 0:  # 保有なし
        position = cash / data['Open'].iloc[i] * (1 - transaction_fee_rate)  # 購入後の株数
        cash = 0.0
    if strategy['Daily Change (%)'].iloc[i] > 1:  # 1%以上上昇
        cash = position * data['Close'].iloc[i] * (1 - transaction_fee_rate)  # 売却後の現金
        position = 0.0
    positions.append(cash + (position * data['Close'].iloc[i]))

strategy['Position'] = positions
strategy['Strategy Return'] = strategy['Position'] / strategy['Position'].iloc[0]

# 結果のプロット
plt.figure(figsize=(12, 6))
plt.plot(buy_and_hold, label='Buy and Hold', linestyle='--')
plt.plot(strategy['Strategy Return'], label='Conditional Trading Strategy')
plt.title('S&P 500 Strategy Simulation')
plt.xlabel('Date')
plt.ylabel('Cumulative Return')
plt.legend()
plt.grid()
plt.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m/tmp/ipykernel_7621/3814172407.py[0m in [0;36m?[0;34m()[0m
[1;32m      7[0m [0mposition[0m [0;34m=[0m [0;36m0.0[0m[0;34m[0m[0;34m[0m[0m
[1;32m      8[0m [0mcash[0m [0;34m=[0m [0;36m1.0[0m  [0;31m# 初期資金 1単位[0m[0;34m[0m[0;34m[0m[0m
[1;32m      9[0m [0mpositions[0m [0;34m=[0m [0;34m[[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m     10[0m [0;32mfor[0m [0mi[0m [0;32min[0m [0mrange[0m[0;34m([0m[0mlen[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 11[0;31m     [0;32mif[0m [0mposition[0m [0;34m==[0m [0;36m0[0m[0;34m:[0m  [0;31m# 保有なし[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     12[0m         [0mposition[0m [0;34m=[0m [0mcash[0m [0;34m/[0m [0mdata[0m[0;34m[[0m[0;34m'Open'[0m[0;34m][0m[0;34m.[0m[0miloc[0m[0;34m[[0m[0mi[0m[0;34m][0m [0;34m*[0m [0;34m([0m[0;36m1[0m [0;34m-[0m [0mtransaction_fee_rate[0m[0;34m)[0m  [0;31m# 購入後の株数[0m[0;34m[0m[0;34m[0m[0m
[1;32m     13[0m         [0mcash[0m [0;34m=[0m [0;36m0.0[0m[0;34m[0m[0;34m[0m[0m
[1;32m     14[0m     [0;32mif[0m [0mstrategy[0m[0;34m[[0m[0;34m'Daily Change (%)'[0m[0;34m][0m[0;34m.[0m[0miloc[0m[0;34m[[0m[0mi[0m[0;34m][0m [0;34m>[0m [0;36m1[0m[0;34m:[0m  [0;31m# 1%以上上昇[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.10/site-packages/pandas/core/generic.py[0m in [0;36m?[0;34m(self)[0m
[1;32m   1575[0m     [0;34m@[0m[0mfinal[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1576[0m     [0;32mdef[0m [0m__nonzero__[0m[0;34m([0m[0mself[0m[0;34m)[0m [0;34m->[0m [0mNoReturn[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1577[0;31m         raise ValueError(
[0m[1;32m   1578[0m             [0;34mf"The truth value of a {type(self).__name__} is ambiguous. "[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1579[0m             [0;34m"Use a.empty, a.bool(), a.item(), a.any() or a.all()."[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1580[0m         )

[0;31mValueError[0m: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().

